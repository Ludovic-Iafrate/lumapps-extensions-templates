{"version":3,"sources":["config.js","Widget/defaultGlobalSettings.js","Widget/Widget.jsx","Widget/WidgetSettings.jsx","Widget/WidgetGlobalSettings.jsx","index.js"],"names":["components","config","bundle","bundleName","providerId","extensionId","description","en","name","extensionComponents","icon","public","whitelist","category","theme","Theme","light","withLumappsContext","value","globalValue","messages","messagesEn","fr","messagesFr","useState","url","setUrl","user","setUser","error","setError","imageId","useGreyScale","useBlur","blur","baseUrl","defaultGlobalSettings","useEffect","a","lumapps","Lumapps","getConnectedUser","res","console","fetch","link","undefined","apiProfile","userLang","window","LUMAPPS_WIDGETS_SETTINGS","lang","Object","keys","includes","locale","className","label","id","after","fullName","fields","email","avatar","thumbnail","mimeType","photoData","replace","profilePicture","size","Size","m","type","NotificationType","content","isOpen","actionLabel","actionCallback","aspectRatio","AspectRatio","horizontal","captionPosition","ImageBlockCaptionPosition","over","tags","s","title","image","WithIntlSettings","properties","exportProp","intl","useIntl","setImageId","setUseGreyScale","setUseBlur","setBlur","debouncedImageId","useDebounce","useExportProps","onChange","checked","onToggle","formatMessage","helper","max","min","ERROR_MODAL_SIZE","small","WidgetGlobalSettings","setBaseUrl","debouncedBaseUrl","ReactDOM","render","StrictMode","Widget","WidgetSettings","document","getElementById"],"mappings":"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","file":"static/js/main.63e71654.chunk.js","sourcesContent":["/**\n *  Create-LumApps-Widget config file\n */\n\n/**\n * You can edit the following to fit your needs\n */\n// Provider and extension identifier. You can claim these identifier from the playground.\nconst providerId = '';\nconst extensionId = '';\n\n// The description of your extensions. You can define it in different language.\nconst description = {\n  en: \"A widget sample, created using 'create-lumapps-widget'\",\n};\n\n// The name of your extensions. You can define it in different language.\nconst name = {\n  en: 'Lumapps Widget Sample',\n};\n\n// The icon of your extensions. You can define it in different language.\nconst icon = {\n  en: 'https://lh3.googleusercontent.com/-6F_iwel8KGY/WD8MdGS0PkI/AAAAAAAAGDI/KaqvKtZCK_AsdK6BcKp6Cy1MpwoEWCUvgCKgB/s400/logo.png', // a working link to your widget icon\n};\n\n// Whether the extension is public or not in the marketplace.\nconst isPublic = true;\n\n// The list of authorized customers.\nconst whitelist = [];\n\n/**\n * The components available for your extensions\n * 'Content' : For the Widget content itself (required)\n * 'Settings' : For your widget settings\n * 'GlobalSettings' : For globalsettings used by platform admin.\n */\nconst components = ['content', 'settings', 'global_settings'];\n\n\nexport const useGlobalSettings = true;\n\n/**\n * Do not edit the following unless you know what you are doing.\n * It may break the build and deploy process.\n */\nconst extensionComponents = components;\nconst config = {\n  bundle: 'SampleWidgetTest1.mdr',\n  bundleName: 'SampleWidgetTest1.mdr',\n  providerId,\n  extensionId,\n  description,\n  name,\n  extensionComponents, // Need to be removed.\n  components,\n  icon,\n  public: isPublic,\n  whitelist,\n  category: 'widget',\n};\n\nif (!useGlobalSettings) {\n  config.extensionComponents.pop();\n}\n\nexport default config;","export default {\n    baseUrl: 'https://picsum.photos/',\n  };","// react and react-dom are not part of the package.json\n// dependencies because of a conflict with LumX versions\n// (imho, LumX should put react and react-dom in peer dependencies)\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport React, { useEffect, useState } from \"react\";\nimport { Lumapps } from \"lumapps-sdk-js\";\nimport {\n  AspectRatio,\n  Chip,\n  ChipGroup,\n  Divider,\n  ImageBlock,\n  ImageBlockCaptionPosition,\n  Notification,\n  NotificationType,\n  Size,\n  Theme,\n  Toolbar,\n  UserBlock,\n} from \"@lumx/react\";\n\nimport { FormattedMessage, IntlProvider } from \"@lumapps-extensions-playground/translations\";\nimport { withLumappsContext, ErrorBoundary } from \"@lumapps-extensions-playground/common\";\n\nimport messagesEn from \"../translations/en.json\";\nimport messagesFr from \"../translations/fr.json\";\n\nimport defaultGlobalSettings from \"./defaultGlobalSettings\";\n\n/**\n * Display random image from the Picsum API.\n *\n * @param {Object} value The different settings to apply to the displayed image.\n */\n\nconst theme = Theme.light;\n\nconst Widget = ({ value = {}, globalValue = {} }) => {\n  const messages = {\n    en: messagesEn,\n    fr: messagesFr,\n  };\n\n  const [url, setUrl] = useState();\n  const [user, setUser] = useState();\n  const [error, setError] = useState();\n\n  const { imageId, useGreyScale, useBlur, blur } = value;\n  const { baseUrl = defaultGlobalSettings.baseUrl } = globalValue;\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const lumapps = new Lumapps();\n        const res = await lumapps.getConnectedUser();\n        setUser(res);\n      } catch (exception) {\n        console.error(exception);\n        setError(exception);\n      }\n    };\n\n    fetch();\n  }, []);\n\n  useEffect(() => {\n    const size = 1200;\n    let link = baseUrl;\n    link =\n      imageId && imageId !== \"\"\n        ? `${link}id/${imageId}/${size}`\n        : `${link}${size}`;\n    link = useGreyScale ? `${link}?grayscale` : link;\n    // eslint-disable-next-line no-nested-ternary\n    link =\n      useBlur && useGreyScale\n        ? `${link}&blur`\n        : useBlur\n        ? `${link}?blur`\n        : link;\n    link =\n      useBlur && blur !== \"\" && blur !== undefined ? `${link}=${blur}` : link;\n\n    setUrl(link);\n  }, [blur, imageId, useBlur, useGreyScale, url, baseUrl]);\n\n  const getProfilePicture = (apiProfile) => {\n    if (\n      apiProfile.thumbnail &&\n      apiProfile.thumbnail.mimeType &&\n      apiProfile.thumbnail.photoData\n    ) {\n      return `data:${\n        apiProfile.thumbnail.mimeType\n      };base64,${apiProfile.thumbnail.photoData\n        .replace(/_/g, \"/\")\n        .replace(/-/g, \"+\")}`;\n    }\n\n    return apiProfile.profilePicture;\n  };\n\n  const {\n    LUMAPPS_WIDGETS_SETTINGS: { userLang },\n  } = window;\n  const lang = Object.keys(messages).includes(userLang) ? userLang : \"en\";\n\n  return (\n    <ErrorBoundary lang={userLang}>\n      <IntlProvider locale={lang} messages={messages[lang]}>\n        <div className=\"widget-picsum\">\n          {!error && user && (\n            <>\n              <Toolbar\n                label={\n                  <span>\n                    <FormattedMessage id=\"title\" />\n                  </span>\n                }\n                after={\n                  <UserBlock\n                    theme={theme}\n                    name={user.fullName}\n                    fields={[user.email]}\n                    avatar={getProfilePicture(user.apiProfile)}\n                    size={Size.m}\n                  />\n                }\n              />\n              <Divider />\n            </>\n          )}\n          {error && (\n            <Notification\n              type={NotificationType.error}\n              content={<FormattedMessage id=\"errors.retrieve_user\" />}\n              isOpen\n              actionLabel=\"Dismiss\"\n              actionCallback={setError}\n            />\n          )}\n\n          <ImageBlock\n            aspectRatio={AspectRatio.horizontal}\n            captionPosition={ImageBlockCaptionPosition.over}\n            description={<FormattedMessage id=\"description\" />}\n            tags={\n              <ChipGroup>\n                <Chip size={Size.s} theme={theme}>\n                  Marketplace\n                </Chip>\n\n                <Chip size={Size.s} theme={theme}>\n                  Widgets\n                </Chip>\n\n                <Chip size={Size.s} theme={theme}>\n                  LumApps\n                </Chip>\n              </ChipGroup>\n            }\n            theme={theme}\n            title={<FormattedMessage id=\"sub_title\" />}\n            image={url}\n          />\n        </div>\n      </IntlProvider>\n    </ErrorBoundary>\n  );\n};\n\nexport default withLumappsContext(Widget);\n","// react and react-dom are not part of the package.json\n// dependencies because of a conflict with LumX versions\n// (imho, LumX should put react and react-dom in peer dependencies)\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport React, { useState } from \"react\";\nimport { Slider, Switch, TextField } from \"@lumx/react\";\n\nimport {\n  FormattedMessage,\n  IntlProvider,\n  useIntl,\n} from \"@lumapps-extensions-playground/translations\";\nimport {\n  ErrorBoundary,\n  ERROR_MODAL_SIZE,\n  withLumappsContext,\n  useDebounce,\n  useExportProps,\n} from \"@lumapps-extensions-playground/common\";\n\nimport messagesEn from \"../translations/en.json\";\nimport messagesFr from \"../translations/fr.json\";\n\n/**\n * Render the widget Picsum setttings form.\n *\n * @param {Object} props The settings component properties.\n */\nconst WithIntlSettings = ({ properties = {}, exportProp }) => {\n  const intl = useIntl();\n\n  const [imageId, setImageId] = useState(properties.imageId);\n  const [useGreyScale, setUseGreyScale] = useState(properties.useGreyScale);\n  const [useBlur, setUseBlur] = useState(properties.useBlur);\n  const [blur, setBlur] = useState(properties.blur);\n\n  const debouncedImageId = useDebounce(imageId, 800);\n\n  useExportProps(debouncedImageId, \"imageId\", properties, exportProp);\n  useExportProps(useGreyScale, \"useGreyScale\", properties, exportProp);\n  useExportProps(useBlur, \"useBlur\", properties, exportProp);\n  useExportProps(blur, \"blur\", properties, exportProp);\n\n  return (\n    <>\n      <TextField\n        className=\"mt0 ml lumx-spacing-margin-vertical-big\"\n        label={<FormattedMessage id=\"settings.image_id\" />}\n        value={imageId}\n        onChange={setImageId}\n      />\n      <Switch\n        className=\"mt+ ml\"\n        checked={useGreyScale}\n        onToggle={setUseGreyScale}\n      >\n        {intl.formatMessage({ id: \"settings.grey\" })}\n      </Switch>\n\n      <Switch\n        className=\"mt+ ml lumx-spacing-margin-vertical-big\"\n        checked={useBlur}\n        onToggle={setUseBlur}\n      >\n        {intl.formatMessage({ id: \"settings.blur\" })}\n      </Switch>\n\n      {useBlur && (\n        <Slider\n          label={<FormattedMessage id=\"settings.blur_value_title\" />}\n          helper={<FormattedMessage id=\"settings.blur_value_desc\" />}\n          max={10}\n          min={1}\n          value={blur}\n          onChange={setBlur}\n        />\n      )}\n    </>\n  );\n};\n\nconst WidgetSettings = ({ properties = {}, exportProp = {} }) => {\n  const messages = {\n    en: messagesEn,\n    fr: messagesFr,\n  };\n\n  const {\n    LUMAPPS_WIDGETS_SETTINGS: { userLang },\n  } = window;\n  const lang = Object.keys(messages).includes(userLang) ? userLang : \"en\";\n\n  return (\n    <ErrorBoundary size={ERROR_MODAL_SIZE.small} lang={userLang}>\n      <IntlProvider locale={lang} messages={messages[lang]}>\n        <WithIntlSettings properties={properties} exportProp={exportProp} />\n      </IntlProvider>\n    </ErrorBoundary>\n  );\n};\n\nexport default withLumappsContext(WidgetSettings);\n","// react and react-dom are not part of the package.json\n// dependencies because of a conflict with LumX versions\n// (imho, LumX should put react and react-dom in peer dependencies)\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport React, { useState } from 'react';\nimport { TextField } from '@lumx/react';\n\nimport defaultGlobalSettings from './defaultGlobalSettings';\nimport { useDebounce, useExportProps } from '@lumapps-extensions-playground/common';\n\n/**\n * Render the widget Picsum setttings form.\n *\n * @param {Object} props The settings component properties.\n */\nconst WidgetGlobalSettings = ({ properties = {}, exportProp }) => {\n  const [baseUrl, setBaseUrl] = useState(properties.baseUrl || defaultGlobalSettings.baseUrl);\n  const debouncedBaseUrl = useDebounce(baseUrl, 800);\n  useExportProps(debouncedBaseUrl, 'baseUrl', properties, exportProp)\n\n  return (\n    <div>\n      <TextField\n        className=\"mt0 ml\"\n        label=\"URL\"\n        value={baseUrl}\n        onChange={setBaseUrl}\n      />\n    </div>\n  );\n};\n\nexport default WidgetGlobalSettings;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Playground } from '@lumapps-extensions-playground/playground';\n\nimport config from './config.js';\nimport { Widget, WidgetSettings, WidgetGlobalSettings } from \"./Widget\";\n\nimport '@lumapps-extensions-playground/playground/playground.esm.css';\n// We only import both themes for the theme switch\n// The order of import is important\nimport '@lumx/core/lumx-theme-material.min.css';\nimport '@lumx/core/lumx-theme-lumapps.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Playground\n      config={config}\n      Widget={Widget}\n      WidgetSettings={WidgetSettings}\n      WidgetGlobalSettings={WidgetGlobalSettings}\n    />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}